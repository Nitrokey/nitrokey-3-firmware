use std::str;
use std::{env, error, path::Path};

use memory_regions::MemoryRegions;

const MEMORY_REGIONS: &MemoryRegions = &MemoryRegions::NKPK;

fn generate_memory_x(outpath: &Path, template: &str, regions: &MemoryRegions) {
    let buildrs_caveat = r#"/* DO NOT EDIT THIS FILE */
/* This file was generated by build.rs */
"#;

    let template = std::fs::read_to_string(template).expect("cannot read memory.x template file");

    let fw_len = regions.firmware.len();
    let template = template.replace("##FLASH_LENGTH##", &format!("{fw_len:#X}"));

    let fs_len = regions.filesystem.len();
    let template = template.replace("##FS_LENGTH##", &format!("{fs_len:#X}"));

    let template = template.replace("##FS_BASE##", &format!("{:#X}", regions.filesystem.start));
    let template = template.replace("##FLASH_BASE##", &format!("{:#X}", regions.firmware.start));

    std::fs::write(outpath, [buildrs_caveat, &template].join("")).expect("cannot write memory.x");
}

fn main() -> Result<(), Box<dyn error::Error>> {
    println!(
        "cargo:rustc-env=NKPK_FIRMWARE_VERSION={}",
        utils::version_string("nitrokey-passkey-firmware", env!("CARGO_PKG_VERSION"))
    );

    if MEMORY_REGIONS.filesystem.start & 0x3ff != 0 {
        panic!("filesystem boundary is not a multiple of the flash block size (1KB)");
    }

    // @todo: move this decision into 'profile.cfg'
    let (memory_x_infix, template_file) = ("ld/nrf52", "../ld/nrf52-memory-template.x");

    println!("cargo:rerun-if-changed={template_file}");
    println!("cargo:rerun-if-changed={template_file}");

    let memory_x_dir =
        Path::new(&env::var("CARGO_MANIFEST_DIR").expect("$CARGO_MANIFEST_DIR not set"))
            .join(memory_x_infix);
    std::fs::create_dir_all(&memory_x_dir).ok();
    let memory_x = memory_x_dir.join("custom_memory.x");

    generate_memory_x(&memory_x, template_file, MEMORY_REGIONS);

    println!(
        "cargo:rustc-link-search={}/../ld",
        env!("CARGO_MANIFEST_DIR")
    );
    println!(
        "cargo:rustc-link-search={}/{}",
        env!("CARGO_MANIFEST_DIR"),
        memory_x_infix
    );

    let lockfile =
        cargo_lock::Lockfile::load(Path::new(env!("CARGO_MANIFEST_DIR")).join("../../Cargo.lock"))?;
    let pkg_cortex_m_rt = lockfile
        .packages
        .iter()
        .find(|p| p.name.as_str() == "cortex-m-rt");

    if let Some(p) = pkg_cortex_m_rt {
        println!("cargo:rustc-link-arg=-Tcortex-m-rt_{}_link.x", p.version);
    }

    Ok(())
}
