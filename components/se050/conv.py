#!/usr/bin/python

import os
import sys

TRYFROM_PATTERN = """impl TryFrom<u8> for %s {
	type Error = Iso7816Error;

	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value%s {
%s		_ => Err(Self::Error::ValueError)
		}
	}
}
"""

INTO_PATTERN = """impl Into<u8> for %s {
	fn into(self) -> u8 {
		match self {
%s		}
	}
}
"""

def emit_convs(tn, d, mask):
	global outfile
	global TRYFROM_PATTERN
	global INTO_PATTERN

	nums = list(d.keys())
	nums.sort()
	tryfrom_str = ""
	into_str = ""

	for n in nums:
		tryfrom_str += "\t\t%s => Ok(Self::%s),\n" % (n, vRev[n])
		into_str += "\t\tSelf::%s => %s,\n" % (vRev[n], n)

	outfile.write(TRYFROM_PATTERN % (tn, mask and (" & %s" % mask) or "", tryfrom_str))
	outfile.write(INTO_PATTERN % (tn, into_str))

tname = None
print("// THIS FILE IS AUTOGENERATED -- DO NOT EDIT")

infile = open(sys.argv[1], "r")
outfile = open(sys.argv[2], "w")

for ln in infile:
	if ln.startswith("pub enum"):
		fields = ln.split(" ")
		tname = fields[2]
		vRev = {}
		mask = None
		for f in fields:
			if f.startswith("mask:"):
				mask = f[5:]
	elif tname is not None:
		if "=" in ln:
			fn, _, vn = ln.strip().split(" ")
			vn = vn.strip(",")
			vRev[vn] = fn
		elif ln.startswith("}"):
			emit_convs(tname, vRev, mask)
			tname = None
		else:
			# suppress emitting this enum, probably not meant to be?
			tname = None

sys.exit(0)
